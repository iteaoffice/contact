{% do headScript().appendFile('assets/js/codemirror.js', 'text/javascript') %}
{% do headScript().appendFile('assets/js/codemirror/sql.js', 'text/javascript') %}
{% do headScript().appendFile('assets/js/codemirror/selection-pointer.js', 'text/javascript') %}
{% do headScript().appendFile('assets/js/codemirror/matchbrackets.js', 'text/javascript') %}
{% do headLink().appendStylesheet('assets/css/codemirror.css') %}


{% do headTitle().append(translate("txt-admin")) %}
{% do headTitle().append(translate("txt-edit-selection-%s")|format(selection)) %}

<h1>{{ translate("txt-edit-contacts-selection-%s")|format(selection) }} </h1>


{% do form.prepare() %}
{{ form().openTag(form)|raw }}

<div class="form-group row">
    <label class="col-sm-3 col-form-label">{{ translate("txt-selection") }}</label>

    <div class="col-sm-9">
        <p class="form-control-plaintext">{{ selectionLink(selection, 'view', 'name') }} {{ selectionLink(selection, 'edit', 'icon') }}</p>
    </div>
</div>


{{ ztbformelement(form.get('type')) }}


<div id="pane-fixed" {% if selectionService.isSql(selection) %}style="display: none"{% endif %}>
    {{ ztbformelement(form.get('added')) }}
    {{ ztbformelement(form.get('removed')) }}


    <div class="row">
        <div class="col-md-6">
            <h2>{{ translate("txt-current-selection") }}</h2>

            <table class="table table-hover table-striped table-sm" id="inselection"></table>


            <input type="button" class="btn btn-outline-info" onclick="Selection.SelectAll()"
                   value="{{ translate("txt-select-all") }}">
            <input type="button" class="btn btn-outline-warning" onclick="Selection.Remove()"
                   value="{{ translate("txt-remove") }}">
            <input type="button" class="btn btn-outline-danger" onclick="Selection.Reset()"
                   value="{{ translate("txt-reset") }}">
        </div>

        <div class="col-md-6">
            <h2>{{ translate("txt-choose-contacts") }}</h2>

            <div class="input-group mb-3">
                {{ formelement(form.get('selection')) }}
                <div class="input-group-append">
                    <input type="button" class="btn btn-outline-primary"
                           onclick="selectionSearch(document.getElementById('selection').value)"
                           value="Get selection">
                </div>
            </div>

            <div class="input-group">
                <input type="text" id="searchstring" placeholder="Search ..." class="form-control">
                <div class="input-group-append">
                    <input type="button" class="btn btn-outline-primary"
                           onclick="wildSearch(document.getElementById('searchstring').value)"
                           value="Search">
                </div>
            </div>

            <h2>{{ translate("txt-search-results") }}</h2>
            <table class="table table-hover table-striped table-sm" id="contacts"></table>


            <input type="button" class="btn btn-outline-info" onclick="Contacts.SelectAll()"
                   value="{{ translate("txt-select-all") }}">
            <input type="button" class="btn btn-outline-success" onclick="Contacts.MoveTo(Selection)"
                   value="{{ translate("txt-add") }}">
        </div>
    </div>
</div>


<div id="pane-sql" {% if not selectionService.isSql(selection) %}style="display: none"{% endif %}>
    {{ ztbformelement(form.get('sql')) }}
</div>

<div class="form-group row">
    <div class="offset-sm-3 col-sm-9">
        {{ ztbformelement(form.get('submit')) }}
        {{ ztbformelement(form.get('cancel')) }}
        {% if form.has('delete') %}
            {{ ztbformelement(form.get('delete')) }}
        {% endif %}
    </div>
</div>

{{ form().closeTag()|raw }}

<style type="text/css">
    #sql {
        position: relative;
        width: 1200px;
        height: 600px;
    }
</style>


<script type="text/javascript">

    $('input[type=radio][name=type]').change(function () {
        if (this.value === '1') {
            $('#pane-sql').show();
            $('#pane-fixed').hide();
        } else if (this.value === '2') {
            $('#pane-sql').hide();
            $('#pane-fixed').show();
        }
    });

    var Selection;


    function oItem(id, displayName, email, org, added, removed) {
        this.id = id;
        this.displayName = displayName;
        this.email = email;
        this.org = org;
        this.removed = removed;
        this.added = added;
        this.selected = false;
    }

    function oSelection(oName, Box) {

        this.oName = oName;
        this.RenderBox = Box;
        this.items = [];

        this.Add = function (id, displayName, email, org, added, removed) {
            this.items[this.items.length] = new oItem(id, displayName, email, org, added, removed)
        }

        this.Reset = function () {
            for (var i = this.items.length - 1; i >= 0; i--) {
                if (this.items[i].added) {
                    this.items.splice(i, 1);
                } else {
                    this.items[i].removed = false;
                }
            }
            this.Render();
        }

        this.Render = function () {
            var out = '';
            var item = null;
            if (this.items.length == 0) {
                out = 'No items.';
            } else {
                for (var i = 0; i < this.items.length; i++) {
                    item = this.items[i];

                    out += '<tr class="' + (item.selected || item.added ? 'table-success' : '') + (item.removed ? 'table-danger' : '') + '" ' +
                        '    id="item' + i + '" ' +
                        '    onclick="' + this.oName + '.Select(' + i + ')" ' +
                        '    >' +
                        '<td>' + (item.added ? '<i class="fa fa-plus text-primary"></i> ' : '') + (item.removed ? '<i class="fa fa-trash-o"></i> ' : '') + item.displayName + '</td>' +
                        '<td>' + item.org + '</td>' +
                        '</tr>';
                }
            }
            document.getElementById(this.RenderBox).innerHTML = out;
        }

        this.Select = function (i) {
            this.items[i].selected = !this.items[i].selected;
            this.Render();
        }

        this.SelectAll = function (i) {
            var item = null;
            for (var i = 0; i < this.items.length; i++) {
                item = this.items[i];
                if (!item.removed) {
                    item.selected = true;
                }
            }
            this.Render();
        }

        this.getAddList = function () {
            var out = '';
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].added) {
                    out += ((out != '') ? ',' : '') + this.items[i].id;
                }
            }
            return out;
        }

        this.getRemoveList = function () {
            var out = '';
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].removed) {
                    out += ((out != '') ? ',' : '') + this.items[i].id;
                }
            }
            return out;
        }

        this.UnSelect = function (id) {
            var item = null;
            for (var i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.id == id) {
                    item.selected = false;
                    break;
                }
            }
        }


        this.Delete = function (id) {
            var item = null;
            for (var i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.id == id) {
                    if (item.added) {
                        this.items.splice(i, 1);
                    } else {
                        item.selected = false;
                        item.removed = !item.removed;
                    }
                    break;
                }
            }
        }

        this.Remove = function () {
            var item = null;
            for (var i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.selected) {
                    if (item.added) {
                        this.items.splice(i, 1);
                    } else {
                        item.selected = false;
                        item.removed = true;
                    }
                }
            }
            this.Render();
        }

        this.MoveTo = function (oSel) {
            var item = null;
            var p = oSel.items.length;
            for (var i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.selected) {
                    if (p > 0) {
                        while (item.lname < oSel.items[p - 1].lname) {
                            p--;
                            if (p == 0) {
                                break;
                            }
                        }
                    }
                    if (p == oSel.items.length) {
                        oSel.items[p] = item;
                    } else {
                        oSel.items.splice(p, 0, item);
                    }
                    item.added = true;
                    item.selected = false;
                    this.items.splice(i, 1);
                }
            }
            this.Render();
            oSel.Render();
        }
    }

    function init() {
        Selection = new oSelection('Selection', 'inselection');
        {
            {% for selectionContact in selection.selectionContact %}
            Selection.Add(
                "{{ selectionContact.contact.id }}",
                "{{ selectionContact.contact.displayName }}",
                "{{ selectionContact.contact.email }}",
                "{{ selectionContact.contact.contactOrganisation.organisation }}", false, false
            );
            {% endfor %}
        }
        Selection.Render();
        Contacts = new oSelection('Contacts', 'contacts');
    }

    function loadSelection(id) {
        getContacts('get=selection&selection=' + id);
    }

    function wildSearch(id) {
        getContacts(id);
    }

    function selectionSearch(id) {
        getContactsFromSelection(id);
    }

    function storeChanges() {
        document.getElementById('added').value = Selection.getAddList();
        document.getElementById('removed').value = Selection.getRemoveList();
        return true;
    }


    function getContacts(q) {
        $.ajax({
            method: 'post',
            url: '{{ url('zfcadmin/contact/search') }}',
            dataType: 'json',
            data: {
                q: q
            },
            success: function (result, status) {
                Contacts.items.length = 0;
                for (var i = 0; i < result.length; i++) {
                    Contacts.Add(
                        result[i].id,
                        result[i].name,
                        result[i].email,
                        result[i].organisation
                    );
                }
                Contacts.Render();
            }
        });
    }

    /**
     * Load the contacts based on a search action
     * @param q
     */
    function getContactsFromSelection(q) {

        $.ajax({
            method: 'post',
            url: '{{ url('zfcadmin/selection/get-contacts') }}',
            dataType: 'json',
            data: {
                id: q
            },
            success: function (result, status) {
                Contacts.items.length = 0;
                for (var i = 0; i < result.length; i++) {
                    Contacts.Add(
                        result[i].id,
                        result[i].name,
                        result[i].email,
                        result[i].organisation
                    );
                }
                Contacts.Render();
            }
        });
    }

    window.onload = init;

    var htmlEditor = CodeMirror.fromTextArea(document.getElementById("sql"), {
        mode: "sql",
        lineNumbers: true,
        selectionPointer: true,
        lineWrapping: true,
        matchBrackets: true
    });
    htmlEditor.setSize(null, 600);
</script>

